/* eslint-disable @typescript-eslint/camelcase */
import Telegraf from 'telegraf';
import { IncomingMessage } from 'telegraf/typings/telegram-types'; // eslint-disable-line

import Action, { ActionProps } from './Action'; // eslint-disable-line

export class JoinAction extends Action {
  constructor(props: ActionProps) {
    super(props);
    this.name = 'JoinAction';
  }

  private menuButtons = Telegraf.Extra.markdown().markup(m => {
    return m.keyboard(['üë§ –ö—Ç–æ —è?', '‚öî –•–æ–¥–∏—Ç—å', '–°—Ç–∞—Ç—É—Å']);
  });

  public test(message: IncomingMessage): boolean {
    if (!message.text) return false;
    return message.text.match(/–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è/) != null;
  }

  public exec(message: IncomingMessage): void {
    const userId = message.from?.id;
    if (!userId) return;
    if (this.gameRoom.checkUserInGame({ userId })) {
      this.gameRoom.join({ userId, name: message.from.username });
      this.bot.telegram.sendMessage(userId, '‚è± –ñ–¥–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö...'); // refresh
    } else {
      this.bot.telegram.sendMessage(userId, '–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ, –¥—ç–±–∏–ª üôÖ ');
    }
    if (this.gameRoom.isFull()) {
      this.bot.telegram.sendMessage(userId, 'üëæ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!', this.menuButtons);
      return;
    }
    // this.bot.telegram.sendMessage(userId, '–ñ–¥–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö'); // refresh
  }
}
